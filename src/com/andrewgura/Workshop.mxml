<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:components="com.andrewgura.ui.components.*"
         creationComplete="onCreationComplete(event)"
         resize="onResize(event)"
         styleName="editor">

    <fx:Script><![CDATA[
        import com.andrewgura.controllers.MainController;
        import com.andrewgura.controllers.ShortcutsController;
        import com.andrewgura.models.MainModel;
        import com.andrewgura.ui.popup.PopupFactory;
        import com.andrewgura.vo.WorkshopConfigVO;

        import mx.core.FlexGlobals;
        import mx.events.DragEvent;
        import mx.events.FlexEvent;
        import mx.events.MenuEvent;
        import mx.events.ResizeEvent;

        import spark.components.WindowedApplication;

        [Bindable]
        private var mainModel:MainModel = new MainModel();

        [Bindable]
        public var config:WorkshopConfigVO;

        private function onCreationComplete(event:FlexEvent):void {
            mainModel.config = config;
            MainController.initApplication(mainModel);
            var application:WindowedApplication = WindowedApplication(FlexGlobals.topLevelApplication);
            application.showStatusBar = false;
            application.addEventListener(InvokeEvent.INVOKE, onAppInvoke);
            if (application.stage) {
                application.stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
            } else {
                application.addEventListener(Event.ADDED_TO_STAGE, onAppAddedToStage);
            }
        }

        private function onAppAddedToStage(event:Event):void {
            event.target.removeEventListener(Event.ADDED_TO_STAGE, onAppAddedToStage);
            event.target.stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
            event.target.stage.addEventListener(DragEvent.DRAG_ENTER, dragEnterHandler);
            event.target.stage.addEventListener(DragEvent.DRAG_DROP, dragDropHandler);
            event.target.stage.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, nativeDragEnterHandler);
            event.target.stage.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, nativeDragDropHandler);
            event.target.stage.nativeWindow.addEventListener(Event.CLOSING, onAppClose);
        }

        private function onAppInvoke(event:InvokeEvent):void {
            if (event.arguments.length > 0) {
                var fileName:String = event.arguments[0];
                MainController.openFileByName(fileName);
            }
        }

        private function onKeyDown(event:KeyboardEvent):void {
            if (event.ctrlKey) {
                if (event.keyCode == Keyboard.CONTROL) {
                    return;
                }
                if (event.keyCode == Keyboard.TAB) {
                    event.preventDefault();
                }
                var keyCode:String = event.keyCode.toString();
                if (event.shiftKey) {
                    keyCode = Keyboard.SHIFT + keyCode;
                }
                ShortcutsController.doCtrlShortcutAction(keyCode);
            }
        }

        protected function dragEnterHandler(event:DragEvent):void {
            NativeDragManager.acceptDragDrop(this);
        }

        protected function dragDropHandler(event:DragEvent):void {
            mainModel.currentProject.processDragDrop(event);
        }

        protected function nativeDragEnterHandler(event:NativeDragEvent):void {
            NativeDragManager.acceptDragDrop(stage);
        }

        protected function nativeDragDropHandler(event:NativeDragEvent):void {
            var dropFiles:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
            if (dropFiles) {
                MainController.openFiles(dropFiles);
            }
        }

        private function onAppClose(event:Event):void {
            event.preventDefault();
            MainController.exitEditor();
        }

        private function onMenuItemClick(event:MenuEvent):void {
            ShortcutsController.doMenuItemAction(event.item);
        }

        protected function onResize(event:ResizeEvent):void {
            PopupFactory.instance.centerAllPopups();
        }

        private function onCloseTab(event:DataEvent):void {
            MainController.closeProjectByIndex(Number(event.data));
        }
        ]]>
  </fx:Script>


    <s:VGroup width="100%" height="100%" gap="0">
        <mx:MenuBar id="menuBar" width="100%" height="24" top="0"
                    dataProvider="{mainModel.menuDataProvider}" showRoot="false" labelField="label"
                    styleName="breezeMenuBar" menuStyleName="breezeMenu"
                    itemClick="onMenuItemClick(event)"/>

        <components:TabGroup width="100%" height="100%"
                             paddingLeft="3" paddingBottom="3" paddingRight="3" paddingTop="3"
                             dataProvider="{mainModel.openedProjects}" labelField="displayName"
                             selectedIndex="@{mainModel.currentProjectIndex}"
                             closeTab="onCloseTab(event)">

            <components:EditorHolder width="100%" height="100%"
                                     projects="{mainModel.openedProjects}"
                                     currentProjectIndex="{mainModel.currentProjectIndex}"
                                     editorClass="{mainModel.config.editorClass}"/>

        </components:TabGroup>


    </s:VGroup>

</s:Group>
